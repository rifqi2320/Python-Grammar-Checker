# Composed unit productions and it's recursive productions
# e.g. Zero or More (A*), One or More (A+), denoted by M*
AugAssign -> ADDA 
AugAssign -> SUBA
AugAssign -> MULA
AugAssign -> MATMULA
AugAssign -> DIVA
AugAssign -> MODA
AugAssign -> BANDA
AugAssign -> BORA
AugAssign -> BXORA
AugAssign -> BSHLA
AugAssign -> BSHRA
AugAssign -> POWA
AugAssign -> IDIVA
CompOp -> LT
CompOp -> GT
CompOp -> EQ
CompOp -> GEQT
CompOp -> LEQT
CompOp -> NEQ
CompOp -> IN
CompOp -> NOT IN
CompOp -> IS
CompOp -> IS NOT
TermOp -> MUL 
TermOp -> MATMUL
TermOp -> DIV
TermOp -> MOD
TermOp -> IDIV
ArithOp -> ADD
ArithOp -> SUB
FactorOp -> ArithOp
FactorOp -> TILDE
ShiftOp -> SHR
ShiftOp -> SHL
MString -> STRING
MString -> MString String
Atom -> LP List RP
Atom -> LB List RB
Atom -> LC DictSet RC
Atom -> NAME
Atom -> NUMBER
Atom -> MString
Atom -> ELLIPSIS
Atom -> NONE
Atom -> TRUE
Atom -> FALSE
DotEllipsis -> DOT
DotEllipsis -> ELLIPSIS
DotName -> NAME
DotName -> DotName DOT NAME
DotAsName -> DotName
DotAsName -> DotName AS NAME
DotAsNames -> DotAsName
DotAsNames -> DotAsName COMMA DotAsNames
DotEllipsisName -> DotEllipsis DotEllipsisName
DotEllipsisName -> DotName
DotEllipsisOneM -> DotEllipsis
DotEllipsisOneM -> DotEllipsis DotEllipsisOneM
FromExpr -> DotEllipsisOneM
FromExpr -> DotEllipsisName
ImportAsName -> NAME
ImportAsName -> NAME AS NAME
MImportAsNames -> e
MImportAsNames -> COMMA ImportAsName MImportAsNames
ImportAsNames -> ImportAsName MImportAsNames
ImportAsNames -> ImportAsName MImportAsNames COMMA
ImportExpr -> MUL
ImportExpr -> LP ImportAsNames RP
ImportExpr -> ImportAsNames
# Atomic Expression
AtomTrail -> Params
AtomTrail -> LB SubList RB
AtomTrail -> DOT NAME
MAtomTrail -> e
MAtomTrail -> AtomTrail MAtomTrail
AtomExpr -> Atom MAtomTrail
AtomExpr -> AWAIT Atom MAtomTrail
Power -> AtomExpr POW Factor
Power -> AtomExpr
Factor -> FactorOp Factor
Factor -> Power
Term -> Factor
Term -> Term TermOp Factor
# Binary and Arithmetic Expression
ArithExpr -> Term
ArithExpr -> ArithExpr ArithOp Term
ShiftExpr -> ArithExpr
ShiftExpr -> ShiftExpr ShiftOp ArithExpr
AndExpr -> AndExpr BAND ShiftExpr
AndExpr -> ShiftExpr
XorExpr -> AndExpr
XorExpr -> XorExpr XOR AndExpr
Expr -> XorExpr
Expr -> Expr BOR XorExpr
# Comparison and Logical Expression (Test)
# Also combine it with Binary and Arithmetic Expression
Comparison -> Expr
Comparison -> Comparison CompOp Expr
NotTest -> NOT NotTest
NotTest -> Comparison
AndTest -> NotTest
AndTest -> AndTest AND NotTest
OrTest -> AndTest
OrTest -> OrTest OR AndTest
Test -> OrTest
Test -> OrTest IF OrTest ELSE Test
MTests -> e
MTests -> COMMA Test
Tests -> Test MTests
Tests -> Test MTests COMMA
# Assignment (+Augmented) Expression
# Support for inline expression (test, incl. bin & arith)
# and also star (spread) expression
StarExpr -> MUL Expr
ExprStmt -> TestsStarExpr AugAssign Tests
ExprStmt -> TestsStarExpr TestsStarExprStmt
# (Test | StarExpr)
TestStarExpr -> Test
TestStarExpr -> StarExpr
# (Test | StarExpr) (',' (Test | StarExpr))* [',']
TestsStarExpr -> TestStarExpr MTestsStarExpr
TestsStarExpr -> TestStarExpr MTestsStarExpr COMMA
# (',' (Test | StarExpr))*
MTestsStarExpr -> COMMA TestStarExpr MTestsStarExpr
MTestsStarExpr -> e
TestsStarExprStmt -> ASSIGN TestsStarExpr TestsStarExprStmt
TestsStarExprStmt -> e
# Multiple Expressions
# Including Star Expression
EStarExpr -> Expr
EStarExpr -> StarExpr
MEStarExpr -> COMMA EStarExpr MEStarExpr
MEStarExpr -> e
Exprs -> EStarExpr MEStarExpr
Exprs -> EStarExpr MEStarExpr COMMA
# Spread Operator for Dict (**)
DStarExpr -> POW Expr
# (Test ':' Test | '**' Expr)
TestDStarExpr -> Test COLON Test
TestDStarExpr -> DStarExpr
# (',' (Test ':' Test | '**' Expr))*
MTestDStarExpr -> COMMA TestDStarExpr MTestDStarExpr
MTestDStarExpr -> e
# Arguments and Parameters
Params -> LP Args RP
Params -> LP RP
ClassParams -> e
ClassParams -> Params
Args -> Arg
Args -> Arg MArgs COMMA
Args -> Arg MArgs
MArgs -> e
MArgs -> COMMA Args MArgs
Arg -> NAME
Arg -> NAME CompFor
Arg -> NAME ASSIGN NAME
Arg -> MUL NAME
# List/Dict/Set Definition
List -> TestsStarExpr
List -> TestStarExpr CompFor
DictSet -> Dict
DictSet -> Set
Dict -> TestDStarExpr DictMake
# (comp_for | (',' (test ':' test | '**' expr))* [','])
DictMake -> CompFor
DictMake -> MTestDStarExpr
DictMake -> MTestDStarExpr COMMA
Set -> TestStar SetMake
# (comp_for | (',' (test | star_expr))* [','])
SetMake -> CompFor
SetMake -> MTestsStarExpr
SetMake -> MTestsStarExpr COMMA
# List Subscription (Indexing) and Slicing
SubList -> Sub MSub
SubList -> Sub MSub COMMA
MSub -> COMMA Sub MSub
MSub -> e
# Subscription and Slicing Type:
# 1. Indexing (e.g. x[Test])
# 2. 1D Slicing (e.g. x[:], x[Test:], x[:Test], x[Test:Test])
# 3. 2D Slicing (e.g. x[A:B:], x[A:B:Test])
Sub -> Test
Sub -> Slice
Sub -> Slice SliceTwo
Slice -> Test COLON Test
Slice -> COLON
Slice -> Test COLON
Slice -> COLON Test 
SliceTwo -> COLON
SliceTwo -> COLON Test
# Comprehension
CompList -> CompFor
CompList -> CompIf
CompFor -> FOR Exprs IN OrTest
CompFor -> FOR Exprs IN OrTest CompList
CompIf -> IF OrTest
CompIf -> IF OrTest CompList
# Basic building block
# Started by many newline, or a statement
Start -> NLStmt ENDMARKER
NLStmt -> NL NLStmt
NLStmt -> Stmt NLStmt
NLStmt -> e
# One Statement, could be Simple or Compound
Stmt -> SimpleStmt
Stmt -> CompoundStmt
# Multiple Statement
MStmt -> Stmt
MStmt -> Stmt MStmt
# 1. Simple Statement: Small Statement OR Multiple Small Statement separated by semicolon
# Ended by NL
# Also support trailing semicolon
SimpleStmt -> SmallStmt NL
SimpleStmt -> SmallStmt SEMICOLON NL
SimpleStmt -> SmallStmt MultiSimpleStmt NL
SimpleStmt -> SmallStmt MultiSimpleStmt SEMICOLON NL
MultiSimpleStmt -> SEMICOLON SmallStmt SimpleStmt MultiSimpleStmt
MultiSimpleStmt -> e
SmallStmt -> ExprStmt
SmallStmt -> PASS
SmallStmt -> Flow
SmallStmt -> Import
# Small Statement Types
# A. Expressions in Statement
# B. Pass
# C. Control Flow (Break, Continue, Return, Raise)
Return -> RETURN
Return -> RETURN Tests
Raise -> RAISE
Raise -> RAISE Test
Raise -> RAISE Test FROM Test
Flow -> BREAK
Flow -> CONTINUE
Flow -> Return
Flow -> Raise
# D. Import (Import, From Import)
Import -> ImportFrom
Import -> ImportName
ImportName -> IMPORT DotAsNames
ImportFrom -> FROM FromExpr IMPORT ImportExpr
# 2. Compound Statement: If/While/For/With/FunDef/Async Statement
# Each consist of one Section that could be either:
# - One simple statement in the same line
# - Multiple Any Statement in different line (min. 1)
Section -> NL INDENT MStmt DEDENT
Section -> SimpleStmt
CompoundStmt -> If
CompoundStmt -> While
CompoundStmt -> For
CompoundStmt -> With
CompoundStmt -> Func
CompoundStmt -> Class
CompoundStmt -> Async
# Compound Statement Types
# A. If
If -> IF Test COLON Section Elif Else
If -> IF Test COLON Section Elif
Elif -> e
Elif -> ELIF Test COLON Section Elif
Else -> ELSE COLON Section
# B. While
While -> WHILE Test COLON Section
While -> WHILE Test COLON Section ELSE COLON Section
# C. For
For -> FOR Exprs IN Tests COLON Section ELSE COLON Section
For -> FOR Exprs IN Tests COLON Section
# D. With
With -> WITH WithExpr COLON Suite
WithExpr -> WithItem
WithExpr -> WithExpr COMMA WithItem
WithItem -> Test
WithItem -> Test AS Expr
# E. Async
Async -> ASYNC FunDef
Async -> ASYNC With
Async -> ASYNC For
# F. Class
Class -> CLASS NAME ClassParams COLON Section
# G. Function
Func -> DEF NAME Params COLON Section