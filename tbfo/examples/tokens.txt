# Lexer only support ASCII Printable Characters
# Anything over than printable should raise error

KEYWORDS
# Keywords
FROM from
IMPORT import
ASYNC async
AWAIT await
AS as
CLASS class
DEF def
RETURN return
PASS pass
RAISE raise
CONTINUE continue
BREAK break
ELIF elif
ELSE else
IF if
FOR for
WHILE while
NONE None
TRUE True
FALSE False
WITH with

# Boolean Logic
NOT not
AND and
OR or
IS is
IN in

SYMBOL

# Logical Operator
EQ ==
NEQ <>
NEQ !=
GEQT >=
GT >
LEQT <=
LT <
TRIPLEQUOTE2 """
TRIPLEQUOTE1 '''
HASHTAG #

# Assignment (+ Augmented)
ADDA +=
SUBA -=
# POW should have greater precedence than MUL
POWA **=
MULA *=
MATMULA @=
# IDIV should have greater precedence than DIV
IDIVA //=
DIVA /=
MODA %=
BANDA &=
BORA |=
BXORA ^=
BSHLA <<=
BSHRA >>=
ASSIGN =

# Arithmetic and Binary Operator
ADD +
SUB -
# POW should have greater precedence than MUL
POW **
MUL *
MATMUL @
# IDIV should have greater precedence than DIV
IDIV //
DIV /
MOD %
BAND &
BOR |
BXOR ^
BSHL <<
BSHR >>

# Misc
QUOTE2 "
QUOTE1 '
COLON :
SEMICOLON ;
# ELLIPSIS should have greater precedence than DOT
ELLIPSIS ...
DOT .
LC {
RC }
LB [
RB ]
LP (
RP )
COMMA ,

# NL should be supported by Lexer
# and defined as \n or \r\n (OS-specific)

# End input will include a ENDMARK token
